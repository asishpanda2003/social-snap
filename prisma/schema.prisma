// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  posts    Post[] //one to many
  comments Comment[] //one to many
  likes    Like[] //one to many

  followers Follows[] @relation("following")
  following Follows[] @relation(("follower"))

  notifications Notifications[] @relation(("userNotifications")) //notification reveive by user
  notificationsCreated Notification[] @relation("notificationCreator") //notification triggered by user
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) //cascade delete means delete all posts if author is deleted

  comments     Comment[]
  likes        Like[]
  notification Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId, postId]) //composite index for faster queries
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId])  //composite index for faster queries
  @@unique([userId,postId]) //unique index to prevent duplicate likes
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  //relations
  follower User @relation("follower",fields: [followerId],references: [id],onDelete: Cascade)
  following User @relation("following",fields: [followingId],references: [id],onDelete: Cascade)

  @@index([followerId,followingId])
  @@id([followerId,followingId])

}